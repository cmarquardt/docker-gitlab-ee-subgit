#!/usr/bin/env bash
# Usage: gldocker-ce new [-]
# Summary: Initialize / create a new release branch for the GitLab/SubGit Docker image
# Help: When called without option, this will print instructions on how to install gldocker-ce in your environment.

set -e

# Default arguments
branch="unknown"
old_version="unknown"
new_version="unknown"

# Command line arguments

# As long as there is at least one more argument, keep looping
while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
       # Provide some help
          -h|--help|help)
          echo "Create a new version of the GitLab/SubGit Docker image."
          echo ""
          echo "Usage: update_version [-b <branch>|-o <old-version>] <new-version>"
          echo ""
          echo "Arguments:"
          echo "   -b <branch>        Create a new branch named 'release/<branch>' off"
          echo "                         from master, creating v<new-version>"
          echo "   -o <old_version>   Update <old-version> to <new-version>"
          echo ""
          echo "Notes:"
          echo " - Before updating a minor version, be sure to have switched into"
          echo "   the corresponding release branch."
          echo " - When creating a new minor version, switch into master, check"
          echo "   for new versions of SubGit, and update Dockerfile and README.md"
          echo "   accordingly, committing them in master. Only then run this script"
          echo "   with the -b <branch> option, which will create a new release"
          echo "   branch."
          echo ""
          echo "Examples:"
          echo " - Update to a new minor version (in master, creating release branch):"
          echo ""
          echo "      update_version -b 9.0 9.0.0-ce.0 "
          echo ""
          echo " - Update to the next patch version (inside the release branch):"
          echo ""
          echo "      update_version -o 9.0.0-ce. 9.013-ce.0"
          echo ""
          exit
          ;;
       # arg value type option. Will catch -b value or --branch value
       -b|-r|--branch|--release)
          shift # past the key and to the value
          branch="release/$1"
          ;;
       # arg=value type option. Will catch -b=value or --branch=value
       -b=*|-r=*|--branch=*|--release=*)
          # No need to shift here since the value is part of the same string
          branch="release/${key#*=}"
          ;;
       # arg value type option. Will catch -b value or --branch value
       -f|-o|--from|--old)
          shift # past the key and to the value
          old_version="$1"
          ;;
       # arg=value type option. Will catch -b=value or --branch=value
       -f=*|-o=*|--from=*|--old=*)
          # No need to shift here since the value is part of the same string
          old_version="${key#*=}"
          ;;
       *)
       # Do whatever you want with extra options
          new_version="$key"
          ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done

# Check command line arguments

if [ $new_version == "unknown" ]; then
    echo "New version not specified."
    exit -1
fi

if [ $branch != "unknown" ]; then
    old_version="latest"
fi

if [ $old_version == "unknown" ]; then
    echo "Old version not specified - either provide that, or create a new branch from master (with --branch)."
    exit -1
fi

# Create a new branch and push

if [ $branch != "unknown" ]; then
    echo "Creating new branch $branch and pushing..."
    git checkout -b $branch
    git push -u origin $branch
fi

# Update Dockerfile

echo "substituting versions in Dockerfile..."
SEDCMD="s/$old_version/$new_version/g"
sed -i '.bak' -e $SEDCMD Dockerfile

# Check Dockerfile

echo "Dockerfile has been updated. Changes are:"
echo ""
set +e
diff -C 3 Dockerfile.bak Dockerfile
set -e
echo ""

# Continue if ok

echo "Are these ok and can be pushed (y|n)?"
read answer
if [ $answer != "y" ]; then
  echo ""
  echo "Not happy? Ok, won't do anything..."
  echo ""
  exit -1
fi

# Commit & push

git add Dockerfile
git commit -m "Update to GitLab (EE) v$new_version."
git tag $new_version -m "Update to GitLab (EE) v$new_version w/ SubGit v3.2.5."
git push
git push --tags

# Remove Dockerfile backup

rm -f Dockerfile.bak
